// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: todo.proto

package notify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailBoxClient is the client API for MailBox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailBoxClient interface {
	GetNotify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (MailBox_GetNotifyClient, error)
}

type mailBoxClient struct {
	cc grpc.ClientConnInterface
}

func NewMailBoxClient(cc grpc.ClientConnInterface) MailBoxClient {
	return &mailBoxClient{cc}
}

func (c *mailBoxClient) GetNotify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (MailBox_GetNotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &MailBox_ServiceDesc.Streams[0], "/notify.MailBox/GetNotify", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailBoxGetNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MailBox_GetNotifyClient interface {
	Recv() (*NotifyReply, error)
	grpc.ClientStream
}

type mailBoxGetNotifyClient struct {
	grpc.ClientStream
}

func (x *mailBoxGetNotifyClient) Recv() (*NotifyReply, error) {
	m := new(NotifyReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MailBoxServer is the server API for MailBox service.
// All implementations must embed UnimplementedMailBoxServer
// for forward compatibility
type MailBoxServer interface {
	GetNotify(*NotifyRequest, MailBox_GetNotifyServer) error
	mustEmbedUnimplementedMailBoxServer()
}

// UnimplementedMailBoxServer must be embedded to have forward compatible implementations.
type UnimplementedMailBoxServer struct {
}

func (UnimplementedMailBoxServer) GetNotify(*NotifyRequest, MailBox_GetNotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNotify not implemented")
}
func (UnimplementedMailBoxServer) mustEmbedUnimplementedMailBoxServer() {}

// UnsafeMailBoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailBoxServer will
// result in compilation errors.
type UnsafeMailBoxServer interface {
	mustEmbedUnimplementedMailBoxServer()
}

func RegisterMailBoxServer(s grpc.ServiceRegistrar, srv MailBoxServer) {
	s.RegisterService(&MailBox_ServiceDesc, srv)
}

func _MailBox_GetNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotifyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MailBoxServer).GetNotify(m, &mailBoxGetNotifyServer{stream})
}

type MailBox_GetNotifyServer interface {
	Send(*NotifyReply) error
	grpc.ServerStream
}

type mailBoxGetNotifyServer struct {
	grpc.ServerStream
}

func (x *mailBoxGetNotifyServer) Send(m *NotifyReply) error {
	return x.ServerStream.SendMsg(m)
}

// MailBox_ServiceDesc is the grpc.ServiceDesc for MailBox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailBox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notify.MailBox",
	HandlerType: (*MailBoxServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNotify",
			Handler:       _MailBox_GetNotify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "todo.proto",
}
